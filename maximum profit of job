#include <iostream>
#include <algorithm>
using namespace std;
int findLastNonConflictingJob(int startTime[], int endTime[], int currentJob) {
    for (int i = currentJob - 1; i >= 0; --i) {
        if (endTime[i] <= startTime[currentJob]) {
            return i;
        }
    }
    return -1; 
}
int jobScheduling(int startTime[], int endTime[], int profit[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (endTime[i] > endTime[j]) {
                swap(startTime[i], startTime[j]);
                swap(endTime[i], endTime[j]);
                swap(profit[i], profit[j]);
            }
        }
    }
    int dp[n];
    dp[0] = profit[0]; 
    for (int i = 1; i < n; ++i) {
        int includeProfit = profit[i];
        int lastNonConflictingJob = findLastNonConflictingJob(startTime, endTime, i);
        if (lastNonConflictingJob != -1) {
            includeProfit += dp[lastNonConflictingJob];
        }
        int excludeProfit = dp[i - 1];
        dp[i] = max(includeProfit, excludeProfit);
    }
    return dp[n - 1];
}
int main() {
    int startTime[5],endTime[5],profit[5],n,i ;
    cout<<"Enter the size:";
    cin>>n;
    cout<<"Enter start time:";
    for(i=0;i<n;i++)
        cin>>startTime[i];
    cout<<"Enter end time:";
    for(i=0;i<n;i++)
        cin>>endTime[i];
    cout<<"Enter profit:";
    for(i=0;i<n;i++)
        cin>>profit[i];
    int maxProfit = jobScheduling(startTime, endTime, profit, n);
    cout << "Maximum profit: " << maxProfit << endl;
    return 0;
}
