#include <iostream>
using namespace std;
typedef struct s {
    char elem[100];
    int top;
} stack;
void push(stack *s, char item) {
    if (s->top == 99)
        cout << "stack full";
    else {
        s->top = s->top + 1;
        s->elem[s->top] = item;
    }
}
bool isempty(stack *s) {
    if (s->top == -1) return true;
    return false;
}
char pop(stack *s) {
    if (s->top == -1) {
        cout << "stack empty";
        return -1;
    } else {
        return s->elem[s->top--];
    }
}
bool areBracketsBalanced(string expr) {
    char x;
    stack s;
    s.top = -1;
    for (int i = 0; i < expr.length(); i++) {
        if (expr[i] == '(' || expr[i] == '[' || expr[i] == '{') {
            push(&s, expr[i]);
        } else if (expr[i] == ')' || expr[i] == ']' || expr[i] == '}') {
            if (isempty(&s))
                return false;
            switch (expr[i]) {
                case ')':
                    x = pop(&s);
                    if (x != '(')
                        return false;
                    break;
                case '}':
                    x = pop(&s);
                    if (x != '{')
                        return false;
                    break;
                case ']':
                    x = pop(&s);
                    if (x != '[')
                        return false;
                    break;
            }
        }
    }
    return isempty(&s);
}
int main() {
    string expr1 = “{ a + b} – { c- d}”;
    string expr2 = “{a+b} – c-d}”;
    string expr3 = “{a+b} - }c-d{“;
    cout << (areBracketsBalanced(expr1) ? “Balanced” : “Unbalanced”) << endl;
    cout << (areBracketsBalanced(expr2) ? “Balanced” : “Unbalanced”) << endl;
    cout << (areBracketsBalanced(expr3) ? “Balanced” : “Unbalanced”) << endl;
    return 0;
}
